service: comics-info

package:
    artifact: .build/lambda/ComicsInfoBackend/lambda.zip

custom:
    characterTableName: character-${self:provider.stage}

provider:
    name: aws
    httpApi:
        payload: '2.0'
    runtime: provided
    stage: ${opt:stage, 'dev'}
    environment:
        CHARACTER_TABLE_NAME: "${self:custom.characterTableName}"
    iamRoleStatements:
      - Effect: Allow
        Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
        Resource: "*"
      - Effect: Allow
        Action:
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:DescribeTable
        Resource:
            - { Fn::GetAtt: [CharacterTable, Arn] }

functions:
    createCharacter:
        handler: characters.create
        events:
        - httpApi:
            path: /characters
            method: POST
    readCharacter:
        handler: characters.read
        events:
        - httpApi:
            path: /characters/{identifier}
            method: GET
    updateCharacter:
        handler: characters.update
        events:
        - httpApi:
            path: /characters/{identifier}
            method: PUT
    deleteCharacter:
        handler: characters.delete
        events:
        - httpApi:
            path: /characters/{identifier}
            method: DELETE
    listCharacters:
        handler: characters.list
        events:
        - httpApi:
            path: /characters
            method: GET

resources:
    Resources:
        CharacterTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.characterTableName}
                AttributeDefinitions:
                  - AttributeName: identifier
                    AttributeType: S
                KeySchema:
                  - AttributeName: identifier
                    KeyType: HASH
                BillingMode: PAY_PER_REQUEST
